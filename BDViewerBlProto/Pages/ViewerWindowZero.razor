@page "/ViewerWindowZero/{userRole}/{trainigScope}"

@layout TreeViewLayout

@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.IO
@using BDViewerBlProto.Data.Models
@inject HttpClient http
@inject IJSRuntime JSRuntime
@inject Services.ApplicationData ApplicationData
@inject Services.CourseData CourseData
<!--
-- ------------------------------------------------------------------------------------------------------
-- HTML                                                                                                --
-- ------------------------------------------------------------------------------------------------------
-->
<div class="collapse" id="glossaryDetailsToggle" style="z-index:77">
    <MudTable Items="@Acronyms" Dense="true" Hover="true" Striped="true" Filter="new Func<Acronym,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Glossary</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search Fields Term & Definition" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Letter</MudTh>
            <MudTh>Term</MudTh>
            <MudTh>Definition</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Letter">@context.Letter</MudTd>
            <MudTd DataLabel="Term">@context.Term</MudTd>
            <MudTd DataLabel="Definition">@context.Definition</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <div class="gap-1"></div>
    <div class="divider div-transparent"></div>
</div>
<div class="collapse" id="refDocDetailsToggle" style="z-index:78">
    <MudTable Items="@RefDocs" Dense="true" Hover="true" Striped="true" Filter="new Func<RefDocuments,bool>(FilterFuncRDocs)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Referance Documents</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="rdocsearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>RefCode</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>FileName</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.RefId</MudTd>
            <MudTd DataLabel="RefCode">@context.RefCode</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="FileName">@context.FileName</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
    <div class="gap-1"></div>
    @if (@selectedItem1 != null)
    {
        <div class="p-2">
            <MudButton Variant="Variant.Filled"
                       ButtonType="ButtonType.Button"
                       Color="Color.Info"
                       EndIcon="@Icons.Sharp.Book"
                       FullWidth="true"
                       OnClick="@LaunchDoc">
                Click to open document:&nbsp&nbsp&nbsp @selectedItem1.FileName
            </MudButton>
        </div>
    }
    <div class="divider div-transparent"></div>
</div>

<div class="cslide-group">
    <div class="slide-topic">
        <h1 class="display-4">Slide Group:&nbsp&nbsp&nbsp @CourseData.CourseGroup</h1>
    </div>
    <div class="slide-cntnt">
        <div class="display-3">Advanced Cockpit</div>
    </div>

    <div class="slide-col1">
        <!--style="float:left; width:50%"-->
        <MudList style="font:500 17px" Clickable="false" Dense="true">
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Night vision compatible head-up primary flight display (HUD)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Color, digital moving map</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Ground Collision Avoidance System (GCAS)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Traffic Collision and Avoidance System (TCAS)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Terrain Awareness and Warning System (TAWS)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Computer monitored aircraft system</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Flight Management System (FMS)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Inertial Navigation System (INS)</MudListItem>
        </MudList>
        <figure>
            <img src="Images/advcock.png" alt="SlideImage" />
            <figcaption>@FigureCaption</figcaption>
        </figure>
    </div>
    <div class="slide-col2">
        <!--style="float:left; width:50%"-->
        <MudList Style="font:500 17px" Clickable="false" Dense="true">
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Dual Global Positioning System (GPS) systems</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Low noise interphone system</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Communications, Navigation, Surveillance/Air Traffic Management (CNS/ATM)</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Multi-mode color radar</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Ground map</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Weather mode</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Wind shear detection</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.ArrowRight">Auto throttle</MudListItem>
        </MudList>
        <figure>
            <img src="Images/advcock2.png" alt="SlideImage" />
            <figcaption>@FigureCaption</figcaption>
        </figure>
    </div>
</div>


<!--
-- ------------------------------------------------------------------------------------------------------
-- CODE BASE                          </CascadingValue>                                                --
-- ------------------------------------------------------------------------------------------------------
-->
@code {

    [Parameter]
    public string userRole { get; set; }
    [Parameter]
    public string trainigScope { get; set; }

    private string FigureCaption = "C-130J Advanced Cockpit";
    private RefDocuments selectedItem1 = null;

    /* Glossary-Terms code --------------------------------------------------------------------------
        * ---------------------------------------------------------------------------------------------- */
    private string searchString = "";
    private string rdocsearchString = "";

    private IEnumerable<RefDocuments> RefDocs = new HashSet<RefDocuments>();
    private IEnumerable<Acronym> Acronyms = new HashSet<Acronym>();

    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions()
        {
            ReferenceHandler = ReferenceHandler.Preserve,
            PropertyNameCaseInsensitive = false
        };
        Acronyms = await http.GetFromJsonAsync<HashSet<Acronym>>("data/gloss-terms.json", options);

        RefDocs = await http.GetFromJsonAsync<HashSet<RefDocuments>>("data/ref-documents.json", options);
    }

    private bool FilterFuncRDocs(RefDocuments element)
    {
        if (string.IsNullOrWhiteSpace(rdocsearchString))
            return true;
        if (element.RefCode.Contains(rdocsearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Title.Contains(rdocsearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool FilterFunc(Acronym element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Term.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Definition.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    /* Glossary-Terms code --------------------------------------------------------------------------
        * ---------------------------------------------------------------------------------------------- */

    private async void LaunchDoc()
    {

        string strURLw2 = "ViewerWindowDoc/" + ApplicationData.Role + "/" + ApplicationData.TrainingScope + "/" + (@selectedItem1.RefId).ToString(); 
        await JSRuntime.InvokeVoidAsync("open", strURLw2, "_blank");
    }

    private async Task AppDataStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        ApplicationData.Role = userRole;
        ApplicationData.TrainingScope = trainigScope;
        ApplicationData.StateChanged += async () => await AppDataStateChanged();
        CourseData.StateChanged += StateHasChanged;
    }

}
<!--await JSRuntime.InvokeVoidAsync("open", doc, "_blank", "application/pdf");
            string doc = "data/documents/" + selectedItem1.FileName;
        await JSRuntime.InvokeVoidAsync("open", doc, "_blank");-->
