@inherits LayoutComponentBase

@using BDViewerBlProto.Data.Models

@layout ViewerMainLayout
@inject Services.CourseData CourseData

<div class="@( ( CollapseTree ? "container-tvs-trns" : "container-tvs" ))">

    <!-- ------------------------------------------------------------------------------------------------ --
      -- Side bar course content tree view colum                                                          --
      -- ------------------------------------------------------------------------------------------------ -->
    <section class="ctvs-lside-tree" id="lsidetreeview">

        <MudTreeView CanHover="true" CanSelect="true" Class="flex-fill" Items="@ActiveCourseTree.TreeItems" CanActivate="true" @bind-ActivatedValue="ActivatedValue" MaxHeight="inherit" Width="inherit" Color="Color.Info">
            <ItemTemplate>
                <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems" Value="@context">
                    <Content>
                        <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                        <MudIcon Icon="@context.Icon" Class="ml-0 mr-2" Color="@Color.Dark" />
                        <MudText>@context.Title</MudText>
                    </Content>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>

    </section>

    <div class="ctvx-lside-toggle">
        <button type="button" @onclick="@( () => CollapseTree = !CollapseTree )">
            <img style="display:block;margin:auto" 
                 src="@( ( CollapseTree ? "Images/Icons/expand-left-w.png" : "Images/Icons/collapse-left-w.png" ))" 
                 height="42" 
                 width="14" />
        </button>
    </div>

    <section class="ctvs-main-content">
        @Body
    </section>


</div>

<!--
            <div class="@( ( CollapseTree ? "expanded" : "collapsed" ))">
    </div>
            <MudButton Variant="Variant.Filled"
                   ButtonType="ButtonType.Button"
                   Color="Color.Info"
                   EndIcon="@Icons.Sharp.Book"
                   FullWidth="true">
        </MudButton>

-->


@code {
    private bool CollapseTree { get; set; } = false;
    private int TViewChildCount = 0;
    private ActivateCourse ActiveCourseTree = new ActivateCourse();

    private async Task AppDataStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        CourseData.TopicCount = ActiveCourseTree.TopicCount;
        CourseData.TopicChildCount = ActiveCourseTree.SlideGroupCount;
        CourseData.StateChanged += async () => await AppDataStateChanged();
    }

    private TreeItemData _ActivatedValue;
    public TreeItemData ActivatedValue
    {
        get
        {
            return _ActivatedValue;
        }
        set
        {
            if (value != null)
            {
                _ActivatedValue = value;
                if (_ActivatedValue.HasChild)
                {
                    CourseData.CourseTopic = _ActivatedValue.Title;
                    CourseData.CourseGroup = "";
                }
                else
                {
                    CourseData.ActiveSlideGroup = _ActivatedValue.OrderID;
                    CourseData.CourseTopic = _ActivatedValue.ParentNode.Title;
                    CourseData.CourseGroup = _ActivatedValue.Title;
                }
            }
        }
    }

}